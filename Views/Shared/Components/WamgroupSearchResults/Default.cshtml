﻿@using Progress.Sitefinity.AspNetCore.Mvc.Rendering
@using Progress.Sitefinity.AspNetCore.Widgets.Models.SearchResults
@using Telerik.Sitefinity.Model.Localization;
@using Telerik.Sitefinity.Web.UI;
@using Elogic.Wamgroup.Sito2023.NetCore.Localization;
@model Elogic.Wamgroup.Sito2023.NetCore.Models.WamgroupSearchResults.SearchResultsViewModel;
@inject Progress.Sitefinity.AspNetCore.Web.IRenderContext renderContext;
@inject LocalizationHelperService localizationHelper;
@* <environment include="Development">
   <script src="Scripts/SearchWidgets/search-results.js" section-name="Bottom" assembly-ref="Progress.Sitefinity.AspNetCore.Widgets"></script>
</environment>
<environment exclude="Development">
   <script src="Scripts/SearchWidgets/search-results.min.js" section-name="Bottom" assembly-ref="Progress.Sitefinity.AspNetCore.Widgets"></script>
</environment> *@

@{
   var queryCollection = this.Context.Request.Query;
   var orderByQuery = this.Context.Request.Query["orderBy"].ToString();
   var sorting = !string.IsNullOrEmpty(orderByQuery) ? orderByQuery : Model.Sorting.ToString();
   var sortingSelectId = Html.GetUniqueId("sf-sort-");
   var searchTerm = this.Context.Request.Query["searchQuery"].ToString();
    var cultureParam = queryCollection[Progress.Sitefinity.RestSdk.QueryParamNames.Culture].ToString();

   @if (!string.IsNullOrEmpty(searchTerm) || renderContext.IsEdit)
   {
      <div class="search-page-results @Model.CssClass"
           id="sf-search-result-container"
           data-sf-role='search-results'
           data-sf-search-query='@searchTerm'
           data-sf-search-catalogue='@queryCollection["indexCatalogue"]'
           data-sf-words-mode='@queryCollection["wordsMode"]'
           data-sf-language='@queryCollection["sf_culture"]'
           data-sf-scoring-info='@queryCollection["scoringInfo"]'
           data-sf-results-all='@queryCollection["resultsForAllSites"]'
           data-sf-sorting='@sorting'
           data-sf-filter='@queryCollection["filter"]'
      @Html.BuildAttributes(Model.Attributes)>

      <p>culture: @cultureParam</p>
         <div class="d-flex align-items-center justify-content-between my-3">
                <h1 role="alert" aria-live="assertive">@Model.ResultsHeader</h1> 
                <div class="d-flex align-items-center gap-2">
               @if (@Model.AllowUsersToSortResults && @Model.TotalCount > 0)
               {
                  <label for="@sortingSelectId" class="form-label text-nowrap mb-0">
                     @localizationHelper.Localize("Ordine.OrdinaPer")
                  </label>
                  <select class="userSortDropdown form-select" title="SortDropdown" id="@sortingSelectId">
                            <option value="@SearchResultsSorting.MostRelevantOnTop">@localizationHelper.Localize("Ordine.Rilevanza")</option>
                            <option value="@SearchResultsSorting.NewestFirst">@localizationHelper.Localize("Ordine.Recenti")</option>
                            <option value="@SearchResultsSorting.OldestFirst">@localizationHelper.Localize("Ordine.Vecchi")</option>
                  </select>
               }
            </div>
         </div>
         <div>
         @if (Model.TotalCount > 0) {
                    <p>@Model.TotalCount @(Model.TotalCount == 1 ? localizationHelper.Localize("ResultsNumberLabelSingular") : localizationHelper.Localize("ResultsNumberLabelPlural"))</p> @*<h4>@Model.TotalCount @Model.ResultsNumberLabel</h4>*@
                }
            <p data-sf-hide-while-loading="true">
               @Model.LanguagesLabel
               @{
                  int count = Model.Languages.Count();
                  @for (int i = 0; i < count; i++)
                  {
                     var language = Model.Languages.ElementAt(i);
                        if (language.Name != cultureParam)
                        {
                                <span>
                                    <a class="text-decoration-none" data-sf-role='search-results-language'
                                       data-sf-language='@language.Name'
                                       href="#">@language.DisplayName</a>@(i + 1 < count ? ',' : null)
                                </span>
                        }
                    
                  }
               }
            </p>
         </div>
            @if (Model.TotalCount > 0)
            {
         <div>
            <p data-sf-hide-while-loading="true">
               <span>
                  <a class="text-decoration-none" data-sf-role='search-results-type'
                  data-sf-type='all'
                     href="@Model.getIndexCatalogUrl("All", this.Context)">Tutti</a>,
               </span>
               @if (Model.DistinctTypes != null)
               {
                  foreach (var item in Model.DistinctTypes)
                  {
                     <span>
                        <a class="text-decoration-none" data-sf-role='search-results-type'
                        data-sf-type='@item.IndexCatalog'
                        href="@Model.getIndexCatalogUrl(item.Namespace ?? "", this.Context)">@item.Plural</a>@(item != Model.DistinctTypes.Last() ? ',' : null)
                     </span>
                  }
               }
               
            </p>
         
         </div>
        
         
         
         <div class="container-results" data-sf-hide-while-loading="true">
            @foreach (var item in Model.SearchResults)
            {
               bool hasLink = !string.IsNullOrEmpty(item.Link);
                   
               <div class="mb-3 d-flex">
                  @if (@item.ThumbnailUrl != null)
                  {
                     <div class="flex-shrink-0 me-3">
                        <a href="@item.Link">
                           <img src="@item.ThumbnailUrl" alt="@item.Title" width="120" />
                        </a>
                     </div>
                  }
               
                  <div class="flex-grow-1">
                     <h3 class="mb-1">
                        <a class="text-decoration-none" href="@item.Link">@item.Title</a>
                       
                     </h3>
                                <p class="mb-1">@Html.HtmlSanitize(item.HighLighterResult.TruncateString(700, SitefinityExtensions.TruncateOptions.IncludeEllipsis))</p>
                   
                      
                                    <a href="@item.Link" target="_blank" title="Read more" aria-label="Visit technology centre" class="" data-call-to-action="" style="color:inherit">
                                        @localizationHelper.Localize("Read more")

                                        <svg xmlns="http://www.w3.org/2000/svg" width="16.102" height="13.801" viewBox="0 0 16.102 13.801"><path d="M108.875-43.348Zm9.51-6.662,6.325,6.038a.863.863,0,0,1,.267.625.864.864,0,0,1-.267.625l-6.325,6.038a.864.864,0,0,1-1.22-.029.862.862,0,0,1,.029-1.22l4.769-4.55H109.738a.863.863,0,0,1-.863-.863.863.863,0,0,1,.863-.862h12.223l-4.769-4.55a.866.866,0,0,1-.029-1.222A.865.865,0,0,1,118.385-50.01Z" transform="translate(-108.875 50.248)" fill="currentColor"></path></svg>
                                    </a>
                  </div>
                
               </div>
            }
               
         </div>
            }
        </div>

      @if (Model.Pager != null)
      {
         <div class="mt-4" id="sf-search-result-pager" data-sf-hide-while-loading="true">
            @await Html.PartialAsync("ContentPager", Model.Pager)
         </div>
      }

      <div id="sf-search-results-loading-indicator" style="display:none">
         <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary my-5" role="status">
               <span class="visually-hidden">Loading...</span>
            </div>
         </div>
      </div>
   }
}
